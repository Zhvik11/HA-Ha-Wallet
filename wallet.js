console.log("üîÑ wallet.js –∑–∞–≥—Ä—É–∂–µ–Ω!");

// ‚úÖ Web3Auth Client ID
const WEB3AUTH_CLIENT_ID = "BDOYHg_xx3KgooZc5JTdAqlIklnnYnkXL8RYAT0OfmMaEVKbEDKgb5X33RBNulq1iOeT7szmQXZIrdu33G7rjMY";

// ‚úÖ Infura RPC URL
const INFURA_RPC_URL = "https://mainnet.infura.io/v3/b8e6aa3efaf84f238c7c886b31f00ee6";

// ‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let web3auth;
let ethersProvider;

// ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ Web3Auth
if (!window.Web3Auth) {
    console.error("‚ùå Web3Auth –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω! –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤ index.html.");
}

// ‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Web3Auth
async function initWeb3Auth() {
    try {
        web3auth = new window.Web3Auth.Modal({
            clientId: WEB3AUTH_CLIENT_ID,
            chainConfig: {
                chainNamespace: "eip155",
                chainId: "0x1",
                rpcTarget: INFURA_RPC_URL // üî• –ò—Å–ø–æ–ª—å–∑—É–µ–º Infura
            }
        });

        await web3auth.initModal();
        console.log("‚úÖ Web3Auth –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Web3Auth:", error);
    }
}

// ‚úÖ –í—Ö–æ–¥ —á–µ—Ä–µ–∑ Web3Auth
async function loginWithWeb3Auth() {
    if (!web3auth) {
        console.error("‚ùå Web3Auth –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!");
        return;
    }

    try {
        const provider = await web3auth.connect();
        console.log("‚úÖ –í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —á–µ—Ä–µ–∑ Web3Auth!", provider);

        ethersProvider = new ethers.providers.JsonRpcProvider(INFURA_RPC_URL);
        const signer = ethersProvider.getSigner();
        const address = await signer.getAddress();

        document.getElementById("walletAddress").innerText = `–ö–æ—à–µ–ª–µ–∫: ${address}`;
        getBalance(address);
        
        showScreen('walletScreen'); // ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —ç–∫—Ä–∞–Ω –∫–æ—à–µ–ª—å–∫–∞ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Web3Auth:", error);
    }
}

// ‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ MetaMask
async function connectWallet() {
    if (!window.ethereum) {
        alert("MetaMask –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ: https://metamask.io/");
        return;
    }

    try {
        ethersProvider = new ethers.providers.Web3Provider(window.ethereum, "any");
        await ethersProvider.send("eth_requestAccounts", []);
        const signer = ethersProvider.getSigner();
        const address = await signer.getAddress();

        console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω MetaMask –∞–∫–∫–∞—É–Ω—Ç:", address);
        document.getElementById("walletAddress").innerText = `–ö–æ—à–µ–ª–µ–∫: ${address}`;

        getBalance(address);
        
        showScreen('walletScreen'); // ‚úÖ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—à–µ–ª–µ–∫
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask:", error);
    }
}

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ ETH
async function getBalance(address) {
    if (!ethersProvider) {
        console.error("‚ùå –ü—Ä–æ–≤–∞–π–¥–µ—Ä –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω!");
        return;
    }

    try {
        const balance = await ethersProvider.getBalance(address);
        const balanceInEth = ethers.utils.formatEther(balance);
        console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: ${balanceInEth} ETH`);
        document.getElementById("walletBalance").innerText = `–ë–∞–ª–∞–Ω—Å: ${balanceInEth} ETH`;
    } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:", error);
    }
}

// ‚úÖ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —ç–∫—Ä–∞–Ω–æ–≤
function showScreen(screenId) {
    document.querySelectorAll(".screen").forEach(screen => {
        screen.style.display = "none";
    });

    document.getElementById(screenId).style.display = "block";
}

// ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ SVG
function bindSvgButtons() {
    setTimeout(() => {
        const loginButton = document.getElementById("loginButton");
        const walletButton = document.getElementById("walletButton");
        const eventButton = document.getElementById("eventButton");

        if (loginButton) {
            loginButton.addEventListener("click", () => {
                console.log("üîë –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞");
                loginWithWeb3Auth();
            });
        } else {
            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ –≤—Ö–æ–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SVG!");
        }

        if (walletButton) {
            walletButton.addEventListener("click", () => {
                console.log("üí∞ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ –∫–æ—à–µ–ª—å–∫–∞");
                connectWallet();
            });
        } else {
            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ –∫–æ—à–µ–ª—å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SVG!");
        }

        if (eventButton) {
            eventButton.addEventListener("click", () => {
                console.log("üìÖ –ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è");
                showScreen('eventScreen');
            });
        } else {
            console.error("‚ùå –ö–Ω–æ–ø–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ SVG!");
        }
    }, 1000);
}

// ‚úÖ –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –∫ –∫–Ω–æ–ø–∫–∞–º –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener("DOMContentLoaded", function () {
    bindSvgButtons();

    const web3AuthButton = document.getElementById("web3AuthButton");
    const connectButton = document.getElementById("connectButton");

    if (web3AuthButton) {
        web3AuthButton.addEventListener("click", loginWithWeb3Auth);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ Web3Auth –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    if (connectButton) {
        connectButton.addEventListener("click", connectWallet);
    } else {
        console.error("‚ùå –ö–Ω–æ–ø–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è MetaMask –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    }

    // ‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º Web3Auth
    initWeb3Auth();
});






